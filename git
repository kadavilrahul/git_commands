INSTALL GIT:
sudo apt update
sudo apt install git
git --version


CONFIGURE GIT:
Configure Git with Your Information:
Initialize git
git init
Check if the directory is a Git repository:
git rev-parse --is-inside-work-tree
You need to set your username and email address to associate commits with your GitHub account.
Set your Git username:
git config --global user.name "kadavilrahul"
Set your Git email:
git config --global user.email "your_email_id@email.com"
You can verify the configuration using:
git config --global --list
Store GitHub Token Using Git Credential Manager
git config --global credential.helper manager-core
When you do your first git push, enter:
Username: your GitHub username
Password: Follow on screen instructions and use your Personal Access Token instead of password
Add the remote URL for your GitHub repository
git remote add origin https://github.com/kadavilrahul/repository_name.git
Check remote
git remote -v
Check status
git status
Add all files
git add .
First commit
git commit -m "Initial commit"
Push to URL
git push --set-upstream origin master


CLONE GIT REPOSITORY:

Clone the Repository (if not already done):
git clone https://github.com/user/repository_name.git
cd repository_name

CLONE A PARTICULAR COMMIT:

# Clone the entire repository
git clone <repository-url>

# Navigate to the repository
cd <repository-name>

# Checkout the specific commit
git checkout <commit-hash>


--------
OTHER GIT COMMANDS:

Set the upstream branch
git branch --set-upstream-to=origin/master master

git remote add origin https://github.com/username/git_repository_name.git

Check the Remote Repository:
After cloning, Git should automatically associate the repository with the remote URL. You can verify this using:
git remote -v

Create or Switch to a Branch:
Ensure you're working on the correct branch. By default, this will be the main branch, but you can check and switch branches if necessary.

To list all branches:
git branch
To switch to another branch (if required):
git checkout <branch-name>
To create a new branch and switch to it:
git checkout -b <new-branch-name>

Make Changes and Stage Them:
After modifying or adding filesCheck status
git status
Use the following command to stage all changes for commit:
git add .

Commit Your Changes:
Once the changes are staged, commit them with a descriptive message:
git commit -m "New upload"

After committing the changes, push them to your GitHub repository using the following command:
git push origin <branch-name>
If you are pushing to the main branch, this command would be:
git push origin main
or
git push
Enter credentials:
Username for 'https://github.com': username
Password/token:  (Use your token instead of password)

or
git push your_github_token and repository_name.git


Pull Changes from GitHub:
If you need to pull changes from the remote repository to keep your local repository up to date, run:
git pull origin <branch-name>
For the main branch:
git pull origin main

Repeat command
Change repository name
Linux

git add . && git commit -m "Minor update" && git push
Windows

git add . ; git commit -m "Minor update" ; git push

Update your local repository with the latest changes from the remote repository, use the following command:
git pull origin main
If your branch is named something other than main, replace main with the correct branch name:
git pull origin <branch-name>

To avoid specifying the repository URL with the token every time you push, you can set up a remote repository and configure your Git credentials to handle authentication automatically. Here's how you can do it:

Step 1: Set up a remote URL (if not done already)
You only need to do this once for the repository:
Go to your repository's folder on your local machine.
Set the remote URL with your token in the following way:
git remote set-url origin https://<your_token>@github.com/username/repository_name.git
For example:

Step 2: Configure Git to remember your credentials (Optional)
If you don't want to enter your token every time, you can set up a credential helper so Git will remember your credentials for you. 
This works even if you're not using a credential manager.
Run this command to cache your credentials:
git config --global credential.helper cache
(Optional)You can specify a timeout for how long the credentials will be cached, like 1 hour (3600 seconds):
git config --global credential.helper 'cache --timeout=3600'

Step 3: Use git push without the URL
Once the URL is set for the remote and credentials are cached, you can simply run:
git push
This will use the remote URL you set earlier and will push changes without asking for your username or token every time.

Explanation
git remote set-url origin <url>: Sets the URL for the repository so that Git knows where to push your changes.
git push: Once you've set up the remote URL and cached your credentials, Git will automatically use that URL and your token for authentication, so you don't need to specify it every time.
Now, after you set everything up, git push will push changes to the correct GitHub repository without needing to specify the full URL each time.

View All Versions (Commits, Tags, and Branches) Together
git log --oneline --decorate --all --graph

Checkout to that commit i.e commit hash
git checkout <commit-hash>  # Switch to the specified commit

 
git checkout -b main

Hard reset to a particluar commit
git reset --hard <commit-hash-of-A>
git push --force
✅ No conflicts.
✅ Clean rollback to A.
✅ Allows pushing without issues.

⚠️ Warning: This will erase all commits after A (B & C) from your local and remote branch.


https://git-scm.com/downloads

Download the Git installer for Windows from the official Git website:
Run the downloaded installer, and follow the setup instructions. 
Choose the default options unless you have specific preferences.
During installation, make sure the option "Git from the command line and also from 3rd-party software" is selected. 
This will make Git accessible from the command line.

View All Commits (Versions)
Every commit in your Git repository represents a version. To see all commits:


git log
This will display a list of all commits in reverse chronological order (most recent first). Each commit will show:

git log --oneline
This will show a simplified list of commits with just the commit hash and message.



git show <tag_name>
Replace <tag_name> with the name of the tag to see details about it.


git branch -a
This will list:
Local branches
Remote branches (if any)


View All Versions (Commits, Tags, and Branches) Together

git log --oneline --decorate --all --graph
This command:
Shows all commits
Includes branch and tag decorations
Displays a visual graph of the commit history


git show <commit_hash>
Replace <commit_hash> with the hash of the commit you want to inspect.


git stash

The git stash command is used to temporarily save (or "stash away") your uncommitted changes so you can work on something else, and then come back to them later.
It's particularly useful when you:

Need to switch branches but have uncommitted changes
Want to save your work-in-progress without committing
Need to quickly switch context without committing half-done work
Here are the most common git stash commands:

git stash or git stash save: Save your current changes to a stash
git stash list: Show all your stashed changes
git stash apply: Apply the most recent stash but keep it in the stash list
git stash pop: Apply the most recent stash and remove it from the stash list
git stash drop: Remove the most recent stash
git stash clear: Remove all stashes

To Check the Current Branch:
git branch

Update repo in single command
git add . && git commit -m "Update" && git push
Change repository name before executing next command
git add . && git commit -m "Update" && git push https://ghp_yourtaken@github.com/kadavilrahul/your-repository.git

(git add . stages all modified and new files in the current directory (. means "everything") prepares them to be committed)
(git commit -m "Test git" Creates a commit with the message "Test git" and saves the changes to the local repository.)
(git push pushes committed changes from the local repository to the remote repository. It pushes to the currently checked-out branch.)

git log --oneline --pretty=format:"%h %ad %s" --date=format:"%Y-%m-%d %H:%M:%S"
This will show a git log with date and time

See all commits with branches and time
git log --all --pretty=format:"%h - %an, %ar : %s"

Checkout to that commit i.e commit hash
git checkout <commit-hash>

User name configuration:
git config --global user.name "Your name"

git config --global user.email "your_email_id@email.com"

Remove these files from Git tracking while keeping them in your local directory.
git rm --cached *.xlsx *.txt



Git Branch and Tag Management
Here's how to create a new branch and add a tag to it in Git:

Creating a New Branch
To create a new branch and switch to it, you can use either of these commands:

# Method 1: Create and switch in one command
git checkout -b new-branch-name

# Method 2: Create and switch separately
git branch new-branch-name
git checkout new-branch-name

# If using Git version 2.23 or later, you can also use:
git switch -c new-branch-name
Adding a Tag
After creating your branch and making your changes, you can add a tag using:


# Create a lightweight tag
git tag tag-name

# Create an annotated tag (recommended) with a message
git tag -a tag-name -m "Tag message describing this version"

# If you want to tag a specific commit
git tag -a tag-name commit-hash -m "Tag message"
Additional Useful Commands

# Push the new branch to remote repository
git push origin new-branch-name

# Push tags to remote repository
git push origin tag-name
# Or push all tags
git push origin --tags

# List all tags
git tag -l

# Delete a tag locally
git tag -d tag-name

# Delete a tag from remote
git push origin --delete tag-name
Remember that tags are typically used to mark specific points in history, such as release versions (v1.0.0, v2.0.0, etc.), while branches are used for ongoing development work.


To delete tags in Git, you can remove them both locally and remotely. Here's how:

Deleting a Tag Locally
To delete a tag from your local repository:

git tag -d tag-name
For example, if the tag is named add-features:

git tag -d add-features
Deleting a Tag Remotely
To delete a tag from a remote repository, you need to push the deletion explicitly:


git push origin --delete add-features
For example, to delete the remote tag v1.0.0:


git push origin --delete v1.0.0
Deleting Multiple Tags
Locally:
You can delete multiple tags at once by listing them:

git tag -d tag1 tag2 tag3
Remotely:
To delete multiple tags from the remote, you can use:

git push origin --delete tag1 tag2 tag3
Alternatively, you can delete all remote tags by first deleting them locally and then pushing the changes:

# Delete all local tags
git tag -d $(git tag)

# Push the deletions to the remote
git push origin --delete $(git tag -l)
Verifying Tag Deletion
After deleting tags, you can verify by listing the tags:

# List all local tags
git tag -l

# List all remote tags
git ls-remote --tags origin

PUSH FROM NEW BRANCH
git push --set-upstream origin version-01
